import time
import os
import logging
import requests


"""--- logger create log object which stores all infor---"""
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)


""""---Django url ---"""
def get_patient(patientsName,patientsNRIC):
    params = {'patientName':patientsName,'patientNRIC':patientsNRIC}
    django_url = "11257ba78a49.ngrok.io/bynricandname/"
    patient_data = requests.get(django_url,params=params)
    patient_data = patient_data.json()
    return patient_data

def get_patient_by_name(patientsName):
    params = {'patientName':patientsName}
    django_url = "11257ba78a49.ngrok.io/byname/"
    patient_data = requests.get(django_url,params=params)
    patient_data = patient_data.json()
    return patient_data

def get_patient_by_nric(patientsNRIC):
    params = {'patientNRIC':patientsNRIC}
    django_url = "11257ba78a49.ngrok.io/bynric/"
    patient_data = requests.get(django_url,params=params)
    patient_data = patient_data.json()
    return patient_data

def get_patient_by_code(patientsAddressCode):
    params = {'patientAddress':patientsAddressCode}
    django_url = "11257ba78a49.ngrok.io/bycode/"
    patient_data = requests.get(django_url,params=params)
    patient_data = patient_data.json()
    return patient_data

''''---  ---'''
def get_slots(intent_request):
    return intent_request['currentIntent']['slots']

def elicit_slot(session_attributes, intent_name, slots, slot_to_elicit, message):
    return {
        'sessionAttributes': session_attributes,
        'dialogAction': {
            'type': 'ElicitSlot',
            'intentName': intent_name,
            'slots': slots,
            'slotToElicit': slot_to_elicit,
            'message': message
        }
    }

def close(session_attributes, fulfillment_state, message):
    response = {
        'sessionAttributes': session_attributes,
        'dialogAction': {
            'type': 'Close',
            'fulfillmentState': fulfillment_state,
            'message': message
        }
    }

    return response

def delegate(session_attributes, slots):
    return {
        'sessionAttributes': session_attributes,
        'dialogAction': {
            'type': 'Delegate',
            'slots': slots
        }
    }

"""--- Helper function---"""

def build_validation_result(is_valid, violated_slot, message_content):
    if message_content is None:
        return {
            "isValid": is_valid,
            "violatedSlot": violated_slot,
        }

    return {
        'isValid': is_valid,
        'violatedSlot': violated_slot,
        'message': {'contentType': 'PlainText', 'content': message_content}
    }


def validate_nric_name(patientsName,patientsNRIC,patientsAddressCode):
    if patientsName is not None and patientsNRIC is not None:
        patientsName = patientsName.capitalize()
        patientsNRIC = patientsNRIC.upper()
        patient_data = get_patient(patientsName,patientsNRIC)
        patient_by_name = get_patient_by_name(patientsName)
        patient_by_nric = get_patient_by_nric(patientsNRIC)

        if patient_data:
            return build_validation_result(True, None, None)
        elif len(patient_by_nric) != 0:
            if patient_by_nric[0]['patientNRIC'].lower() == patientsNRIC.lower():
                return {'isValid': True}
    #         # print('only patientNRIC is correct,elicit next slot to verify postal code')
        elif len(patient_by_name) != 0:
            if patient_by_name[0]['patientName'].lower() == patientsName.lower():
                return build_validation_result(True, None, None)
            # print('only name is correct,elicit next slot to verify postal code')
        if len(patient_by_name) != 0:
            if patientsAddressCode == patient_by_name[0]['patientAddress']:
                return build_validation_result(True,None,None)
        if len(patient_by_nric) != 0:
            if patientsAddressCode == patient_by_nric[0]['patientAddress']:
                return build_validation_result(True, None, None)
                # print('postal code okay name')
        else:
            return build_validation_result(False,
        "patientName","Both your NRIC and Name are incorrect, please re-enter your NRIC")

    return build_validation_result(True, None, None)

    """ --- Intents --- """


def dispatch(intent_request):
    """
    Called when the user specifies an intent for this bot.
    """

    logger.debug(
        'dispatch userId={}, intentName={}'.format(intent_request['userId'], intent_request['currentIntent']['name']))

    intent_name = intent_request['currentIntent']['name']

    # Dispatch to your bot's intent handlers
    if intent_name == 'Authentication':
        return authentication(intent_request)

    raise Exception('Intent with name ' + intent_name + ' not supported')


def authentication(intent_request):
    slots = get_slots(intent_request)
    patientName = slots["patientName"]
    patientNRIC = slots["patientNRIC"]
    patientAddressCode = slots["patientAddressCode"]
    patientname = ""
    patientnric = ""
    allergies = ""
    medication = ""
    dosage = ""
    sideeffect = ""

    if patientName is not None and patientNRIC is not None:
        patientName = patientName.capitalize()
        patientNRIC = patientNRIC.upper()
        empty = []
        if get_patient(patientName, patientNRIC) != empty:
            data = get_patient(patientName, patientNRIC)
            patientname = data[0]['patientName']
            patientnric = data[0]['patientNRIC']
            allergies = data[0]['patientAllergies']
            medication = data[0]['patientMedicationName']
            dosage = data[0]['dosage']
            sideeffect = data[0]['sideEffects']

        # elif get_patient_by_code(patientAddressCode) != empty:
        #     data = get_patient(patientAddressCode)
        #     patientname = data[0]['patientName']
        #     patientnric = data[0]['patientNRIC']
        #     allergies = data[0]['patientAllergies']
        #     medication = data[0]['patientMedicationName']
        #     dosage = data[0]['dosage']
        #     sideeffect = data[0]['sideEffects']

    source = intent_request['invocationSource']

    if source == 'DialogCodeHook':
        # Perform basic validation on the supplied input slots.
        # Use the elicitSlot dialog action to re-prompt for the first violation detected.
        validation_result = validate_nric_name(patientName,patientNRIC,patientAddressCode)
        if not validation_result['isValid']:
            slots[validation_result['violatedSlot']] = None
            return elicit_slot(intent_request['sessionAttributes'],
                               intent_request['currentIntent']['name'],
                               slots,
                               validation_result['violatedSlot'],
                               validation_result['message'])

        output_session_attributes = intent_request['sessionAttributes'] if intent_request[
                                                                               'sessionAttributes'] is not None else {}
        return delegate(output_session_attributes, get_slots(intent_request))




    notes = 'Thank you {},your NRIC is {}.Your medication prescribe is {}, ' \
            'you are allergy to {}, the side effect is {} and the dosage is {}.'.format(patientname,patientnric,medication,allergies,sideeffect,dosage)
    return close(intent_request['sessionAttributes'],
                 'Fulfilled',
                 {'contentType': 'PlainText',
                  'content': notes})


    """ --- Main handler --- """


def lambda_handler(event, context):
    """
    Route the incoming request based on intent.
    The JSON body of the request is provided in the event slot.
    """
    # By default, treat the user request as coming from the America/New_York time zone.
    os.environ["TZ"] = "Asia/Singapore"
    time.tzset()
    logger.debug('event.bot.name={}'.format(event['bot']['name']))
    logger.debug(event)
    return dispatch(event)
