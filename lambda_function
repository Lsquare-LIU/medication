import time
import os
import logging
import requests


"""--- logger create log object which stores all infor---"""
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)


""""---Django url ---"""
def get_url():

    django_url = "https://41c50a120045.ngrok.io/patient/"
    r = requests.get(django_url)
    patientData = r.json()
    return patientData

''''---  ---'''
def get_slots(intent_request):
    return intent_request['currentIntent']['slots']


def elicit_slot(session_attributes, intent_name, slots, slot_to_elicit, message):
    return {
        'sessionAttributes': session_attributes,
        'dialogAction': {
            'type': 'ElicitSlot',
            'intentName': intent_name,
            'slots': slots,
            'slotToElicit': slot_to_elicit,
            'message': message
        }
    }


def close(session_attributes, fulfillment_state, message):
    response = {
        'sessionAttributes': session_attributes,
        'dialogAction': {
            'type': 'Close',
            'fulfillmentState': fulfillment_state,
            'message': message
        }
    }

    return response


def delegate(session_attributes, slots):
    return {
        'sessionAttributes': session_attributes,
        'dialogAction': {
            'type': 'Delegate',
            'slots': slots
        }
    }



"""--- Helper function---"""


def build_validation_result(is_valid, violated_slot, message_content):
    if message_content is None:
        return {
            "isValid": is_valid,
            "violatedSlot": violated_slot,
        }

    return {
        'isValid': is_valid,
        'violatedSlot': violated_slot,
        'message': {'contentType': 'PlainText', 'content': message_content}
    }

def validate_postalcode(patientsAddress):
    patientData = get_url()
    patientsAddress = str(patientsAddress)
    for i in range(len(patientData)):
        #patient[i] gets the list value
        if  patientData[i]['patientAddress'] == patientsAddress:
            return True
        elif i == len(patientData) - 1:
            return False

def validate_nric(patientsNRIC):
    patientData = get_url()
    prefixList = ["s", "t", "f", "g"]
    for i in range(len(patientData)):
        #patient[i] gets the list value
        if  patientData[i]['patientNRIC'].lower() == patientsNRIC.lower():
            return True
        elif len(patientsNRIC) != 9 or patientsNRIC[0].lower() not in prefixList or patientsNRIC[
        8].isalpha() == False or i == len(patientData) - 1:
            return False

def validate_name(patientsName):
    patientData = get_url()
    #To check if the name matches the database
    for i in range(len(patientData)):
        #patient[i] gets the list value
        if patientData[i]['patientName'].lower() == patientsName.lower():
            return True
        elif i == len(patientData) - 1:
            return False


def validate_credentials(patientsName,patientsNRIC,patientsAddress):
    if patientsName is not None:
        if not validate_name(patientsName):
            return build_validation_result(False, 'patientName',
                                       'Sorry we cannot find {}'.format(patientsName))

    if patientsNRIC is not None:
        if not validate_nric(patientsNRIC):
            return build_validation_result(
            False,
            "patientNRIC",
            'NRIC should have total of 9 characters, the first letter should include [s,t,f,g],and the last letter should be alphabet. Please check and try again'.format(
                patientsNRIC))

    # patientAddressCode = str(patientAddressCode)
    if patientsAddress is not None:
        if not validate_postalcode(patientsAddress):
            return build_validation_result(False,
                                           "patientAddressCode","Your code enter is not valid or wrong")
    return build_validation_result(True, None, None)


    """ --- Intents --- """


def dispatch(intent_request):
    """
    Called when the user specifies an intent for this bot.
    """

    logger.debug(
        'dispatch userId={}, intentName={}'.format(intent_request['userId'], intent_request['currentIntent']['name']))

    intent_name = intent_request['currentIntent']['name']

    # Dispatch to your bot's intent handlers
    if intent_name == 'Authentication':
        return authentication(intent_request)

    raise Exception('Intent with name ' + intent_name + ' not supported')


def authentication(intent_request):
    """
    Performs dialog management and fulfillment for ordering flowers.
    Beyond fulfillment, the implementation of this intent demonstrates the use of the elicitSlot dialog action
    in slot validation and re-prompting.
    """

    slots = get_slots(intent_request)

    patientName = slots["patientName"]
    patientNRIC = slots["patientNRIC"]
    patientAddressCode = slots["patientAddressCode"]

    source = intent_request['invocationSource']

    if source == 'DialogCodeHook':
        # Perform basic validation on the supplied input slots.
        # Use the elicitSlot dialog action to re-prompt for the first violation detected.

        validation_result = validate_credentials(patientName,patientNRIC,patientAddressCode)
        if not validation_result['isValid']:
            slots[validation_result['violatedSlot']] = None
            return elicit_slot(intent_request['sessionAttributes'],
                               intent_request['currentIntent']['name'],
                               slots,
                               validation_result['violatedSlot'],
                               validation_result['message'])

        output_session_attributes = intent_request['sessionAttributes'] if intent_request[
                                                                               'sessionAttributes'] is not None else {}
        return delegate(output_session_attributes, get_slots(intent_request))

        # patientNRIC=str(patientNRIC).lower()

    return close(intent_request['sessionAttributes'],
                 'Fulfilled',
                 {'contentType': 'PlainText',
                  'content': 'Thank you {},Your NRIC is {}, we have verified your credentials'.format(patientName,patientNRIC)})


    """ --- Main handler --- """


def lambda_handler(event, context):
    """
    Route the incoming request based on intent.
    The JSON body of the request is provided in the event slot.
    """
    # By default, treat the user request as coming from the America/New_York time zone.
    os.environ["TZ"] = "Asia/Singapore"
    time.tzset()
    logger.debug('event.bot.name={}'.format(event['bot']['name']))
    logger.debug(event)
    return dispatch(event)
